name: Build and Release

on:
    push:
        branches:
            - master
            - dev

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: 1.23

            - name: Build project
              run: go build -o yap main.go

            - name: Create build artifact
              run: mkdir -p build && mv yap build/

            - name: Upload build artifact
              uses: actions/upload-artifact@v3
              with:
                  name: yap
                  path: build/yap

    release:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Get the latest tag (or default to 0.1.0)
              id: get_tag
              run: |
                  TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
                  echo "::set-output name=tag::$TAG"

            - name: Set version number
              id: semver
              run: |
                  BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
                  CURRENT_TAG=${{ steps.get_tag.outputs.tag }}
                  CURRENT_TAG=${CURRENT_TAG#v} # Strip the "v" prefix if it exists

                  MAJOR=$(echo $CURRENT_TAG | cut -d. -f1)
                  MINOR=$(echo $CURRENT_TAG | cut -d. -f2)
                  PATCH=$(echo $CURRENT_TAG | cut -d. -f3)

                  if [ "$BRANCH" == "master" ]; then
                    # Increment minor version
                    MINOR=$((MINOR + 1))
                    PATCH=0
                  else
                    # Increment patch version
                    PATCH=$((PATCH + 1))
                  fi

                  NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
                  echo "::set-output name=new_version::$NEW_VERSION"

            - name: Check if tag already exists
              id: check_tag
              run: |
                  if git rev-parse "refs/tags/${{ steps.semver.outputs.new_version }}" >/dev/null 2>&1; then
                    echo "Tag already exists"
                    exit 0
                  fi

            - name: Create Git tag (if it doesn't exist)
              if: steps.check_tag.outputs.result != 'Tag already exists'
              run: |
                  git config user.name "github-actions"
                  git config user.email "github-actions@github.com"
                  git tag ${{ steps.semver.outputs.new_version }}
                  git push origin ${{ steps.semver.outputs.new_version }}

            - name: Create a GitHub release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ steps.semver.outputs.new_version }}
                  release_name: Release ${{ steps.semver.outputs.new_version }}
                  draft: false
                  prerelease: false
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload binary to release
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./build/yap
                  asset_name: yap
                  asset_content_type: application/octet-stream
