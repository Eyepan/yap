name: Release

on:
    push:
        branches:
            - dev
            - master

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: 1.23

            - name: Get the current version
              id: get_version
              run: |
                  if gh release list --limit 1 | grep -qv ""; then
                    VERSION=$(gh release list --limit 1 | head -n 1 | awk '{print $2}')
                  else
                    VERSION="0.0.0"
                  fi
                  echo "Current version is $VERSION"
                  echo "VERSION=$VERSION" >> $GITHUB_ENV

            - name: Calculate new version
              id: new_version
              run: |
                  VERSION=${{ env.VERSION }}
                  IFS='.' read -r major minor patch <<<"$VERSION"
                  if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
                    patch=$((patch+1))
                  elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
                    minor=$((minor+1))
                    patch=0
                  fi
                  NEW_VERSION="$major.$minor.$patch"
                  echo "New version is $NEW_VERSION"
                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

            - name: Build binaries for Linux
              run: GOARCH=amd64 GOOS=linux go build -o ./target/${{ github.event.repository.name }}-linux main.go

            - name: Build binaries for Windows
              run: GOARCH=amd64 GOOS=windows go build -o ./target/${{ github.event.repository.name }}-windows main.go

            - name: Build binaries for MacOS
              run: GOARCH=amd64 GOOS=darwin go build -o ./target/${{ github.event.repository.name }}-darwin main.go

            - name: Create release
              run: |
                  if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
                    gh release create ${{ env.NEW_VERSION }} ./target/${{ github.event.repository.name }}-linux ./target/${{ github.event.repository.name }}-windows ./target/${{ github.event.repository.name }}-darwin --title "Release ${{ env.NEW_VERSION }}" --notes "Release generated by GitHub Actions" --prerelease
                  elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
                    gh release create ${{ env.NEW_VERSION }} ./target/${{ github.event.repository.name }}-linux ./target/${{ github.event.repository.name }}-windows ./target/${{ github.event.repository.name }}-darwin --title "Release ${{ env.NEW_VERSION }}" --notes "Release generated by GitHub Actions"
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
